<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<sec:authentication-manager id="clientDetailAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<sec:authentication-provider user-service-ref="clientDetailsUserService" />
	</sec:authentication-manager>
	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<!-- reference of class annnotated @Component with name customClientDetailServiceImpl -->
		<constructor-arg ref="customClientDetailServiceImpl" />
	</bean>

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientDetailAuthenticationManager" />
	</bean>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
	</bean>

	<bean id="authServerAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="golenchi/authServer" />
		<property name="typeName" value="Basic" />
	</bean>


	<sec:http pattern="/oauth/token" create-session="stateless"
		use-expressions="false" authentication-manager-ref="clientDetailAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<sec:anonymous enabled="false" />
		<sec:http-basic entry-point-ref="authServerAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
		<sec:csrf disabled="true" />
	</sec:http>

	<!-- The OAuth2 protected resources are separated out into their own block 
		so we can deal with authorization and error handling separately. This isn't 
		mandatory, but it makes it easier to control the behaviour. access-decision-manager-ref="accessDecisionManager" -->
	<sec:http pattern="/v1/**" create-session="never"
		use-expressions="true" entry-point-ref="resourceServerAuthenticationEntryPoint"
		xmlns="http://www.springframework.org/schema/security">
		<sec:anonymous enabled="false" />
		<sec:intercept-url pattern="/v1/**" access="hasRole('USER')" />
		<sec:custom-filter ref="resourceServerFilter"
			before="PRE_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
		<sec:http-basic />
		<sec:csrf disabled="true" />
	</sec:http>

	<bean id="resourceServerAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="golenchi/resourceServer" />
		<property name="typeName" value="Basic" />
	</bean>	

	<sec:authentication-manager id="userDetailsAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="customUserDetailsServiceImpl">
			<password-encoder ref="plaintextPasswordEncoder" />
			<!-- <password-encoder hash="md5" /> -->
		</authentication-provider>
	</sec:authentication-manager>

	<!-- Used for the persistenceof tokens (currently an in jdbc implementation) -->
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<!-- <property name="clientDetailsService" ref="clientDetails" /> -->
		<property name="clientDetailsService" ref="customClientDetailServiceImpl" />
	</bean>

	<bean id="oAuth2RequestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<constructor-arg ref="customClientDetailServiceImpl" />
	</bean>

	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="tokenStore" ref="tokenStore" />
		<property name="requestFactory" ref="oAuth2RequestFactory" />
	</bean>


	<oauth:authorization-server client-details-service-ref="customClientDetailServiceImpl"
		token-services-ref="tokenServices" user-approval-handler-ref="userApprovalHandler">
		<oauth:refresh-token />
		<oauth:password authentication-manager-ref="userDetailsAuthenticationManager" />
	</oauth:authorization-server>
	<oauth:resource-server id="resourceServerFilter"
		entry-point-ref="resourceServerAuthenticationEntryPoint" resource-id="golenchiRestAPI"
		token-services-ref="tokenServices" />
	<sec:global-method-security pre-post-annotations="enabled"/>

</beans>
